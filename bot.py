from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command
from aiogram import F
import asyncio
import os

TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=TOKEN)
dp = Dispatcher()

queue = []  # –ø—Ä–æ—Å—Ç–∞—è –æ—á–µ—Ä–µ–¥—å –≤ –ø–∞–º—è—Ç–∏

def get_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üü© –í—Å—Ç–∞—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å", callback_data="join")],
        [InlineKeyboardButton(text="‚¨ú –ü–æ–∫–∏–Ω—É—Ç—å –æ—á–µ—Ä–µ–¥—å", callback_data="leave")],
        [InlineKeyboardButton(text="üîπ –°–ø–∏—Å–æ–∫ –æ—á–µ—Ä–µ–¥–∏", callback_data="list")],
        [InlineKeyboardButton(text="üö´ –ü–µ—Ä–µ–¥—É–º–∞–ª", callback_data="cancel")]
    ])

def queue_text():
    if not queue:
        return "–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞ üïä"
    text = "üìã –¢–µ–∫—É—â–∞—è –æ—á–µ—Ä–µ–¥—å:\n"
    for i, user in enumerate(queue, start=1):
        text += f"{i}. {user.mention_html()}\n"
    return text

@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! üëã –Ø –ø–æ–º–æ–≥—É –≤–µ—Å—Ç–∏ –æ—á–µ—Ä–µ–¥—å –ø–æ –æ—Ç—á–µ—Ç–∞–º.", reply_markup=get_keyboard())

@dp.callback_query(F.data == "join")
async def join_queue(callback: types.CallbackQuery):
    user = callback.from_user
    if user in queue:
        await callback.answer("–¢—ã —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏ üòâ", show_alert=True)
        return
    queue.append(user)
    await callback.message.answer(f"{user.mention_html()} –≤—Å—Ç–∞–ª(–∞) –≤ –æ—á–µ—Ä–µ–¥—å!", parse_mode="HTML")
    await callback.message.answer(queue_text(), parse_mode="HTML", reply_markup=get_keyboard())
    await callback.answer()

@dp.callback_query(F.data == "leave")
async def leave_queue(callback: types.CallbackQuery):
    user = callback.from_user
    if user not in queue:
        await callback.answer("–¢—ã –Ω–µ –≤ –æ—á–µ—Ä–µ–¥–∏ ü§∑", show_alert=True)
        return
    queue.remove(user)
    next_user = queue[0] if queue else None
    msg = f"{user.mention_html()} –ø–æ–∫–∏–Ω—É–ª(–∞) –æ—á–µ—Ä–µ–¥—å."
    if next_user:
        msg += f"\n–°–ª–µ–¥—É—é—â–∏–π: {next_user.mention_html()}!"
    await callback.message.answer(msg, parse_mode="HTML")
    await callback.message.answer(queue_text(), parse_mode="HTML", reply_markup=get_keyboard())
    await callback.answer()

@dp.callback_query(F.data == "cancel")
async def cancel_queue(callback: types.CallbackQuery):
    user = callback.from_user
    if user in queue:
        queue.remove(user)
        await callback.message.answer(f"{user.mention_html()} –ø–µ—Ä–µ–¥—É–º–∞–ª(–∞).", parse_mode="HTML")
    await callback.message.answer(queue_text(), parse_mode="HTML", reply_markup=get_keyboard())
    await callback.answer()

@dp.callback_query(F.data == "list")
async def show_list(callback: types.CallbackQuery):
    await callback.message.answer(queue_text(), parse_mode="HTML", reply_markup=get_keyboard())
    await callback.answer()

async def main():
    print("Bot started...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
